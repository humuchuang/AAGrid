package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Authentication extends Contract {
    public static final String[] BINARY_ARRAY = {"","ffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610eca578082015181840152602081019050610eaf565b50505050905090810190601f168015610ef75780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610f1757600080fd5b505af1158015610f2b573d6000803e3d6000fd5b505050506040513d6020811015610f4157600080fd5b81019080805190602001909291905050509250602060405190810160405280600081525091508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610fcb57600080fd5b505af1158015610fdf573d6000803e3d6000fd5b505050506040513d6020811015610ff557600080fd5b810190808051906020019092919050505060001415611042577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8283848393509850985098509850611499565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156110b257600080fd5b505af11580156110c6573d6000803e3d6000fd5b505050506040513d60208110156110dc57600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f7075626c69635f6b657900000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561119157600080fd5b505af11580156111a5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156111cf57600080fd5b8101908080516401000000008111156111e757600080fd5b828101905060208101848111156111fd57600080fd5b815185600182028301116401000000008211171561121a57600080fd5b50509291905050508273ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f757365725f696e666f0000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156112c257600080fd5b505af11580156112d6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561130057600080fd5b81019080805164010000000081111561131857600080fd5b8281019050602081018481111561132e57600080fd5b815185600182028301116401000000008211171561134b57600080fd5b50509291905050508373ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260088152602001807f7369675f64617461000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156113f357600080fd5b505af1158015611407573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561143157600080fd5b81019080805164010000000081111561144957600080fd5b8281019050602081018481111561145f57600080fd5b815185600182028301116401000000008211171561147c57600080fd5b505092919050505083935082925081915080905098509850985098505b50505050509193509193565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f745f6964656e7469747900000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561154f57600080fd5b505af1158015611563573d6000803e3d6000fd5b505050506040513d602081101561157957600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a72305820e8ef04897e0560df42c8ca52e2199faa0f458599d7c2112dcf96e238c4f91fd50029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","1f168015610e8d5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610ead57600080fd5b505af1158015610ec1573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb48a6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260098152602001807f757365725f696e666f0000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b83811015610f85578082015181840152602081019050610f6a565b50505050905090810190601f168015610fb25780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610fd257600080fd5b505af1158015610fe6573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4896040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260088152602001807f7369675f64617461000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156110aa57808201518184015260208101905061108f565b50505050905090810190601f1680156110d75780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156110f757600080fd5b505af115801561110b573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c08c846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b838110156111ca5780820151818401526020810190506111af565b50505050905090810190601f1680156111f75780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561121757600080fd5b505af115801561122b573d6000803e3d6000fd5b505050506040513d602081101561124157600080fd5b810190808051906020019092919050505090506001811415611266576000955061128a565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe95505b6112b3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505b8a6040518082805190602001908083835b6020831015156112e957805182526020820191506020810190506020830392506112c4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207f2ffdcdafb1b1905045b3b985862663058e7eab18bb0caac87c63c140923fea39878c8c8c60405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561138957808201518184015260208101905061136e565b50505050905090810190601f1680156113b65780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156113ef5780820151818401526020810190506113d4565b50505050905090810190601f16801561141c5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561145557808201518184015260208101905061143a565b50505050905090810190601f1680156114825780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a2859650505050505050949350505050565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff166359a48b656040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600a8152602001807f745f6964656e7469747900000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561154f57600080fd5b505af1158015611563573d6000803e3d6000fd5b505050506040513d602081101561157957600080fd5b810190808051906020019092919050505090508092505050905600a165627a7a72305820dbb152bdf3bc338a5a07cef4cdaef9c51b1128d8b406cc9d26e46ca9bf908b500029"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"account_id\",\"type\":\"string\"},{\"name\":\"public_key\",\"type\":\"string\"},{\"name\":\"user_info\",\"type\":\"string\"},{\"name\":\"sig_data\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account_id\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"name\":\"account_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"public_key\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"user_info\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"sig_data\",\"type\":\"string\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected Authentication(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt register(String account_id, String public_key, String user_info, String sig_data) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(public_key), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user_info), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sig_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void register(String account_id, String public_key, String user_info, String sig_data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(public_key), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user_info), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sig_data)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account_id, String public_key, String user_info, String sig_data) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account_id), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(public_key), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(user_info), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(sig_data)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, String, String> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple4<BigInteger, String, String, String> select(String account_id) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(account_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<BigInteger, String, String, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue());
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account_id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.public_key = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.user_info = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.sig_data = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRegisterEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRegisterEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REGISTEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Authentication load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Authentication(contractAddress, client, credential);
    }

    public static Authentication deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Authentication.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] account_id;

        public BigInteger ret;

        public String public_key;

        public String user_info;

        public String sig_data;
    }
}
